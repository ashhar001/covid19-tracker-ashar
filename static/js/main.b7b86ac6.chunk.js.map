{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Cards/Cards.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setfetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b7b86ac6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__23-2V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2khm-\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport styles from './Cards.module.css';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate}}) => {\r\n    if(!confirmed){\r\n        return 'Loading...';\r\n    }\r\n   //console.log(props);\r\n    \r\n    return(\r\n        <div className = {styles.container}>\r\n            <Grid container spacing={3} justify='center'>\r\n                <Grid item component = {Card} xs={12} md={3} className={ cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color = \"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end ={confirmed.value} duration= {2.5} separator=\",\"/>\r\n                        </Typography>\r\n                        <Typography color =\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of Active Cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component = {Card} xs={12} md={3} className={ cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color = \"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end ={recovered.value} duration= {2.5} separator=\",\"/>\r\n                        </Typography>\r\n                        <Typography color =\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of Recoveries from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component = {Card} xs={12} md={3} className={ cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color = \"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end ={deaths.value} duration= {2.5} separator=\",\"/>\r\n                        </Typography>\r\n                        <Typography color =\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of Deaths caused by COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async(country) => {\r\n    let changeableUrl = url;\r\n\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n\r\n    try{\r\n      \r\n       const {data: { confirmed, recovered, deaths, lastUpdate}} = await axios.get(changeableUrl);\r\n       return {confirmed, recovered, deaths, lastUpdate};\r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\nexport const fetchDailyData = async () => {\r\n    try{\r\n        const { data } = await axios.get(`${url}/daily`);   //check\r\n\r\n        \r\n        const modifedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n        \r\n        return modifedData; \r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try{\r\n        const {data: {countries}} = await axios.get(`${url}/countries`);\r\n\r\n        //console.log(response);\r\n        return countries.map((country) => country.name);\r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n    }\r\n}","import React, {useState, useEffect} from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport {Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ( { data: {confirmed, recovered, deaths}, country }) => {     //check\r\n    const [dailyData, setDailyData ] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData( await fetchDailyData());\r\n        }\r\n\r\n        //console.log(dailyData);\r\n\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    const lineChart = (\r\n        dailyData.length\r\n            ?(\r\n                <Line\r\n                data={{\r\n                    labels: dailyData.map(({ date }) => date),\r\n                    datasets: [{\r\n                        data: dailyData.map(({ confirmed }) => confirmed),\r\n                        label: 'Infected',\r\n                        borderColor: '#3333ff',\r\n                        fill: true,\r\n                    }, {\r\n                        data: dailyData.map(({ deaths }) => deaths),\r\n                        label: 'Deaths',\r\n                        borderColor: 'red',\r\n                        backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                        fill: true,\r\n                    }],\r\n                }}  \r\n            />): null\r\n    );\r\n\r\n    \r\n    const barChart = (\r\n        confirmed\r\n        ?(\r\n            <Bar \r\n                data = {{\r\n                    labels: ['Infected', 'Recovered', 'Deaths'],\r\n                    datasets: [{\r\n                        label: 'People',\r\n                        backgroundColor:[\r\n                            'rgba(0, 0, 255, 0.5)',\r\n                            'rgba(0, 255, 0, 0.5)',\r\n                            'rgba(255, 0, 0, 0.5)',\r\n                        ],\r\n                        data:[confirmed.value, recovered.value, deaths.value ]\r\n                    }]\r\n                }}\r\n                options = {{\r\n                    legend: { display: false},\r\n                    title: { display:true, text: `Current state in ${ country }`},\r\n                }}\r\n\r\n            />\r\n        ) : null\r\n    )\r\n\r\n    return(\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n    const [fetchedCountries, setfetchedCountries ] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setfetchedCountries(await fetchCountries());\r\n        }\r\n\r\n        //fetchCountries();\r\n        fetchAPI();\r\n    },[setfetchedCountries]);\r\n\r\n   // console.log(fetchedCountries);\r\n\r\n    return(\r\n        <FormControl className = { styles.formControl }>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value ={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    ) \r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\r\n\r\n/*\r\nimport Cards from './components/Cards/Cards';\r\nimport Cards from './components/Chart/Chart';\r\nimport Cards from './components/CountryPicker/CountryPicker';\r\n*/\r\n\r\nimport {Cards, Chart, CountryPicker} from './components';\r\nimport styles from './App.module.css';\r\nimport { fetchData } from './api';\r\nimport coronaImage from './images/image.png';\r\n\r\n\r\nclass App extends React.Component{\r\n\r\nstate = {\r\n    data:{},\r\n    country: '',\r\n}\r\n\r\n    async componentDidMount(){\r\n         \r\n        const fetchedData = await fetchData();\r\n\r\n        this.setState({data: fetchedData});\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        const fetchedData = await fetchData(country);\r\n        this.setState({ data: fetchedData, country: country});\r\n    }\r\n\r\n    render(){\r\n\r\n        const { data, country } = this.state;\r\n        return(\r\n            <div className={styles.container}>\r\n                <img className = {styles.image} src={ coronaImage } alt=' COVID-19'/>\r\n                <Cards data = { data }/>\r\n                <CountryPicker handleCountryChange = {this.handleCountryChange}/>\r\n                <Chart data = { data } country = { country }/>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3sNks\",\"card\":\"Cards_card__3WRVT\",\"infected\":\"Cards_infected___Vn43\",\"recovered\":\"Cards_recovered__3A8uF\",\"deaths\":\"Cards_deaths__9AmEN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3D7M4\",\"image\":\"App_image__3NP4R\"};"],"sourceRoot":""}